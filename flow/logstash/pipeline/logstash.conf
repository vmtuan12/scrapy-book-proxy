input {
	beats {
		port => 5044
	}

	tcp {
		port => 50000
	}

	kafka {
		bootstrap_servers => "kafka-bookrec:9092"
		topics => ["book"]
		decorate_events => "basic"
		codec => "json"
	}
}

## Add your filters / logstash plugins configuration here
filter {
	elasticsearch {
		hosts => ["elasticsearch-bookrec:9200"]
		user => "logstash_internal"
		password => "${LOGSTASH_INTERNAL_PASSWORD}"
		query => "_id:%{[id]}"
		index => "book-v1"
		fields => { 
			"review_counts" => "temp_review_counts"
			"rating" => "temp_rating"
			"genres" => "temp_genres"
		}
	}
	ruby {
		code => "
			hash = event.to_hash
			hash.each do |k,v|
				if v == nil
					event.remove(k)
				end
			end
			review_counts = event.get('review_counts')
			second_review_counts = event.get('review_counts')
      		temp_review_counts = event.get('temp_review_counts')
			if review_counts && temp_review_counts
				review_counts = review_counts.to_i + temp_review_counts.to_i
				event.set('review_counts', review_counts)
				event.remove('temp_review_counts')
			end
			rating = event.get('rating')
      		temp_rating = event.get('temp_rating')
			if rating && temp_rating && review_counts && temp_review_counts
				rating = rating.to_f
				temp_rating = temp_rating.to_f
				rating = ((rating*second_review_counts.to_f)+(temp_rating*temp_review_counts))/(second_review_counts.to_f+temp_review_counts)
				event.set('rating', rating)
				event.remove('temp_rating')
			end

			genres = event.get('genres') || []
			temp_genres = event.get('temp_genres')
			if temp_genres
				genres |= temp_genres  # Merge temp_genres array into genres array while removing duplicates
				event.set('genres', genres)
			end

			event.remove('temp_rating')
			event.remove('temp_review_counts')
			event.remove('temp_genres')
		"
	}
	if [series] {
		mutate {
			strip => [ "name", "author", "description", "series", "genres" ]
		}	
	} else {
		mutate {
			strip => [ "name", "author", "description", "genres" ]
		}
	}
}

output {
	elasticsearch {
		hosts => ["elasticsearch-bookrec:9200"]
		user => "logstash_internal"
		password => "${LOGSTASH_INTERNAL_PASSWORD}"
		doc_as_upsert => true
    	action => "update"
		index => "book-v1"
		document_id => "%{id}"
		workers => 1
	}
}
